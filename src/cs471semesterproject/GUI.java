/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs471semesterproject;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.PriorityQueue;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kevinashley
 */
public class GUI extends javax.swing.JFrame {

    PriorityQueue<Process> pQueue = new PriorityQueue<Process>();
    List<Process> blocked = new ArrayList<Process>();
    List<Process> current = new ArrayList<Process>();
    RandomNumbers pid = new RandomNumbers(10000);
    RandomNumbers priority = new RandomNumbers(100);
    
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rQTbl = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        bLTbl = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        cPTbl = new javax.swing.JTable();
        addNewbtn = new javax.swing.JButton();
        killAllbtn = new javax.swing.JButton();
        blockedListLbl = new javax.swing.JLabel();
        readyQueueLbl = new javax.swing.JLabel();
        currentProcesslbl = new javax.swing.JLabel();
        contextSwitchBtn = new javax.swing.JButton();
        blockRqBtn = new javax.swing.JButton();
        unblockbtn = new javax.swing.JButton();
        killReadyProcessBtn = new javax.swing.JButton();
        blockCurrentProcessBtn = new javax.swing.JButton();
        killCurrentBtn = new javax.swing.JButton();
        killBlockedBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 976, 614));
        setMaximumSize(new java.awt.Dimension(980, 620));
        setMinimumSize(new java.awt.Dimension(976, 614));
        setResizable(false);

        rQTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Priority", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(rQTbl);

        bLTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Priority", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bLTbl);

        cPTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "Priority", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(cPTbl);

        addNewbtn.setText("Add New Process");
        addNewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewbtnActionPerformed(evt);
            }
        });

        killAllbtn.setText("Kill All");
        killAllbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killAllbtnActionPerformed(evt);
            }
        });

        blockedListLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        blockedListLbl.setText("Blocked List:");

        readyQueueLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        readyQueueLbl.setText("Ready Queue:");

        currentProcesslbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        currentProcesslbl.setText("Current Process:");

        contextSwitchBtn.setText("Contect Switch");
        contextSwitchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextSwitchBtnActionPerformed(evt);
            }
        });

        blockRqBtn.setText("Block");
        blockRqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockRqBtnActionPerformed(evt);
            }
        });

        unblockbtn.setText("Unblock");
        unblockbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unblockbtnActionPerformed(evt);
            }
        });

        killReadyProcessBtn.setText("Kill");
        killReadyProcessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killReadyProcessBtnActionPerformed(evt);
            }
        });

        blockCurrentProcessBtn.setText("Block Current");
        blockCurrentProcessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockCurrentProcessBtnActionPerformed(evt);
            }
        });

        killCurrentBtn.setText("Kill Current");
        killCurrentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killCurrentBtnActionPerformed(evt);
            }
        });

        killBlockedBtn.setText("Kill");
        killBlockedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killBlockedBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(readyQueueLbl)
                                .addGap(18, 18, 18)
                                .addComponent(blockRqBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(killReadyProcessBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(blockedListLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unblockbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(killBlockedBtn))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addNewbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(killAllbtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(contextSwitchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(currentProcesslbl)
                                .addGap(18, 18, 18)
                                .addComponent(blockCurrentProcessBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(killCurrentBtn))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentProcesslbl)
                    .addComponent(blockCurrentProcessBtn)
                    .addComponent(killCurrentBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addNewbtn)
                            .addComponent(contextSwitchBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(killAllbtn))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(readyQueueLbl)
                        .addComponent(blockRqBtn)
                        .addComponent(killReadyProcessBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(blockedListLbl)
                        .addComponent(unblockbtn)
                        .addComponent(killBlockedBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addNewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewbtnActionPerformed
        Process np = new Process(pid.list.get(0),priority.list.get(0),"Ready");
        pQueue.add(np);
        DefaultTableModel ready = (DefaultTableModel) rQTbl.getModel();
        ready.addRow(new Object[]{np.getPid(), np.getPriority(), np.getStatus()});
        pid.list.remove(0);
        priority.list.remove(0);
        
    }//GEN-LAST:event_addNewbtnActionPerformed

    private void killAllbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killAllbtnActionPerformed
        DefaultTableModel ready = (DefaultTableModel) rQTbl.getModel();
        DefaultTableModel currentP = (DefaultTableModel) cPTbl.getModel();
        DefaultTableModel blockP = (DefaultTableModel) bLTbl.getModel();
        ready.setRowCount(0);
        currentP.setRowCount(0);
        blockP.setRowCount(0);
        pQueue.clear();
        current.clear();
        blocked.clear();
    }//GEN-LAST:event_killAllbtnActionPerformed

    private void contextSwitchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextSwitchBtnActionPerformed
        
        DefaultTableModel currentP = (DefaultTableModel) cPTbl.getModel();
        DefaultTableModel ready = (DefaultTableModel) rQTbl.getModel();
        
        if(currentP.getRowCount() == 0){
           
            Process p2 = pQueue.poll();
            p2.setStatus("Current Process");
            currentP.addRow(new Object[]{p2.getPid(), p2.getPriority(),
                p2.getStatus()}); 
            current.add(p2);
             for (int i = 0; i < ready.getRowCount(); i++) {
                if ((ready.getValueAt(i, 0)).equals(p2.getPid())) {
                    ready.removeRow(i);
                    break;
                }
            }
        }
        else if(currentP.getRowCount() == 1){
            Process nextC = pQueue.peek();
            Process c = current.get(0);
            
            if(nextC.getPriority() < c.getPriority()){
                c.setStatus("Ready");
                nextC = pQueue.poll();
                nextC.setStatus("Current Process");
            
                //delete current process from table
                currentP.setRowCount(0);
                //add current process back to ready queue
                pQueue.add(c);
                //delete current process from current list
                current.clear();
                //add current process back into readytbl
                ready.addRow(new Object[]{c.getPid(), c.getPriority(),
                    c.getStatus()});
            
                currentP.addRow(new Object[]{nextC.getPid(), nextC.getPriority(),
                    nextC.getStatus()}); 
                current.add(nextC);
            
                for (int i = 0; i < ready.getRowCount(); i++) {
                    if ((ready.getValueAt(i, 0)).equals(nextC.getPid())) {
                        ready.removeRow(i);
                        break;
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Process with highest "
                        + "priority is currently running");
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "CPU in use!");
        }
    }//GEN-LAST:event_contextSwitchBtnActionPerformed

    private void blockRqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockRqBtnActionPerformed
        DefaultTableModel ready = (DefaultTableModel) rQTbl.getModel();
        DefaultTableModel blockP = (DefaultTableModel) bLTbl.getModel();
        
        int row = rQTbl.getSelectedRow();
        if(row > -1){
            int pid = Integer.parseInt(rQTbl.getValueAt(row, 0).toString());
       
            for (Process p : pQueue) {
                if(p.getPid() == pid){
                    p.setStatus("Blocked");
                    blocked.add(p);
                    blockP.addRow(new Object[]{p.getPid(), p.getPriority(),
                    p.getStatus()});
                    pQueue.remove(p);
                    //remove from ready Queue table
                    ready.removeRow(rQTbl.getSelectedRow());
                    break;
                }
            }   
        }else if(ready.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "There are no processes in the Ready Queue");
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a process from the Ready Queue");
        }
    }//GEN-LAST:event_blockRqBtnActionPerformed

    private void killReadyProcessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killReadyProcessBtnActionPerformed
        DefaultTableModel ready = (DefaultTableModel) rQTbl.getModel();
        int row = rQTbl.getSelectedRow();
        if(row > -1){
            int pid = Integer.parseInt(rQTbl.getValueAt(row, 0).toString());
        
            for (Process p : pQueue) {
                if(p.getPid() == pid){
                    pQueue.remove(p);
                    //remove from ready Queue table
                    ready.removeRow(rQTbl.getSelectedRow());
                    break;
                }
            }
        }else if(ready.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "There are no processes in the Ready Queue");
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a process from the Ready Queue");
        }
    }//GEN-LAST:event_killReadyProcessBtnActionPerformed

    private void blockCurrentProcessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockCurrentProcessBtnActionPerformed
        DefaultTableModel currentP = (DefaultTableModel) cPTbl.getModel();
        DefaultTableModel blockP = (DefaultTableModel) bLTbl.getModel();
        
        int row = cPTbl.getSelectedRow();
        if(row > -1){
            int pid = Integer.parseInt(cPTbl.getValueAt(row, 0).toString());
            Process p = current.get(0);
            
            if(p.getPid() == pid){
                p.setStatus("Blocked");
                blocked.add(p);
                blockP.addRow(new Object[]{p.getPid(), p.getPriority(),
                p.getStatus()});
                current.remove(p);
                //remove from current table
                currentP.removeRow(cPTbl.getSelectedRow());  
            }
            
        }else if(currentP.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "No process currently running");
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select the current process");
        }
    }//GEN-LAST:event_blockCurrentProcessBtnActionPerformed

    private void killCurrentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killCurrentBtnActionPerformed
        DefaultTableModel currentP = (DefaultTableModel) cPTbl.getModel();
        int row = cPTbl.getSelectedRow();
        if(row > -1){
            int pid = Integer.parseInt(cPTbl.getValueAt(row, 0).toString());
            Process p = current.get(0);

            if(p.getPid() == pid){
                currentP.removeRow(cPTbl.getSelectedRow());
                current.remove(p);
            }
            
        }else if(currentP.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "No process currently running");
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select the current process");
        }
    }//GEN-LAST:event_killCurrentBtnActionPerformed

    private void killBlockedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killBlockedBtnActionPerformed
        DefaultTableModel blockP = (DefaultTableModel) bLTbl.getModel();
        int row = bLTbl.getSelectedRow();
        if(row > -1){
            int pid = Integer.parseInt(bLTbl.getValueAt(row, 0).toString());
        
            for (Process p : blocked) {
                if(p.getPid() == pid){
                    blocked.remove(p);
                    //remove from ready Queue table
                    blockP.removeRow(bLTbl.getSelectedRow());
                    break;
                }
            }
        }else if(blockP.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "There are no processes in the Blocked List");
        }else {
            JOptionPane.showMessageDialog(null, "Please select a process from the Blocked List");
        }
    }//GEN-LAST:event_killBlockedBtnActionPerformed

    private void unblockbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unblockbtnActionPerformed
        DefaultTableModel ready = (DefaultTableModel) rQTbl.getModel();
        DefaultTableModel blockP = (DefaultTableModel) bLTbl.getModel();
        
        int row = bLTbl.getSelectedRow();
        if(row > -1){
            int pid = Integer.parseInt(bLTbl.getValueAt(row, 0).toString());
       
            for (Process p : blocked) {
                if(p.getPid() == pid){
                    p.setStatus("Ready");
                    pQueue.add(p);
                    ready.addRow(new Object[]{p.getPid(), p.getPriority(),
                    p.getStatus()});
                    blocked.remove(p);
                    //remove from block list table
                    blockP.removeRow(bLTbl.getSelectedRow());
                    break;
                }
            }   
        }else if(blockP.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "There are no processes in the Blocked List");
        }else {
            JOptionPane.showMessageDialog(null, "Please select a process from the Blocked List");
        }
    }//GEN-LAST:event_unblockbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewbtn;
    private javax.swing.JTable bLTbl;
    private javax.swing.JButton blockCurrentProcessBtn;
    private javax.swing.JButton blockRqBtn;
    private javax.swing.JLabel blockedListLbl;
    private javax.swing.JTable cPTbl;
    private javax.swing.JButton contextSwitchBtn;
    private javax.swing.JLabel currentProcesslbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton killAllbtn;
    private javax.swing.JButton killBlockedBtn;
    private javax.swing.JButton killCurrentBtn;
    private javax.swing.JButton killReadyProcessBtn;
    private javax.swing.JTable rQTbl;
    private javax.swing.JLabel readyQueueLbl;
    private javax.swing.JButton unblockbtn;
    // End of variables declaration//GEN-END:variables
}
